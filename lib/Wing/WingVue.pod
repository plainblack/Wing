=head1 wing.vue.js

A suite of Vue Wing utilities.

L<https://vuejs.org>

=head1 SYNOPSIS

  [% INCLUDE wing_ui_css_requirements.tt %]
  [% INCLUDE wing_ui_js_requirements.tt %]

  new Vue({
    el : '#app',
    data: {
        users : wing.object_list({
            params : {
                _include_options : 1,
                _include_related_objects : ['photo'], // assumes you have a related object called photo
            },
            list_api : '/api/user',
            create_api : '/api/user',
            new_defaults : { some_id : 'xxx' },
            on_create : function(properties, index) {
                wing.success(properties.username + ' created.');
            },
            on_update : function(properties, index) {
                wing.success(properties.username + ' saved.');
            },
            on_delete : function(properties, index) {
                window.location.href = '/';
            },
        }),
    },
    mounted() {
        this.users.search();
        this.users.fetch_options();
    },
  });

  <!-- in html -->
  <div id="app">
    <div v-for="user in users.objects">{{user.properties.username}} <button @click="user.delete()">Delete</button></div>
    <div>
        <div class="form-group">
            <label for="username">Username</label>
            <input id="username" type="text" v-model="users.new.username" placeholder="username" class="form-control">
        </div>
        <div class="form-group">
            <label for="developer">Is a software developer?</label>
            <wing-select-new :list="users" property="developer"></wing-select-new>
        </div>
        <button @click="users.create()"></button>
    </div>
  </div>



=head1 Components

=head2 characters-remaining

Generates a float-right div that shows how many characters a field has left.

 <characters-remaining max="100" :property="user.properties.bio"></characters-remaining>


=head2 comments

Used in comjunction with L<Wing::Role::Result::Comment> to generate a comments section.

 <div id="app">
   <comments :comments="comments" current_user_id="[% current_user.id %]" is_admin="[% current_user.is_admin || 0 %]" special_badge_label="designer" :special_badge_user_id="designer.properties.user_id"></comments>
 </div>

 <script type="text/javascript">
        const app = new Vue({
            el : '#app',
            data : {
                comments : wing.object_list({
                    list_api : '[% designasset._relationships.comments %]',
                    create_api : '/api/designassetcomment',
                    new_defaults : {
                        designasset_id : '[% designasset.id %]',
                    },
                    params : {
                        _include_related_objects : ['user'],
                        _order_by : ['date_created'],
                    },
                }),
            },
        });
 </script>

=head2 confirmation-toggle

Generates a button that toggles C<wing.confirmations> on/off.

 <confirmation-toggle></confirmation-toggle>

NOTE: You need to include C<wing.confirmations> in the data section of your app for this to work.

    new Vue({
      el : '#app',
      data: {
          confirmations: wing.confirmations,
          ...
      },
      ...
    });


=head2 wing-option-label

Allows you to generate a field value label from a list of options for that field. So you can display the label rather than the value. You can either use it with an C<object_list> where you have called C<fetch_options> like this:

 <wing-option-label :list="parts" :object="part" :property="columns[name].name"></wing-option-label>

Or you can call it on a C<object> where you have set C<_include_options> in the fetch like this:

 <wing-option-label :object="deck" property="brand_approval"></wing-option-label>


=head2 wing-pagination

Generates a pagination selector.

 <wing-pagination :list="users"></wing-pagination>


=head2 wing-select

Generates a select list from from a C<wing.object> field that has enumerated options.

  <wing-select :object="user" property="username"></wing-select>


=head2 wing-select-new

Generates a select list from from a C<wing.object_list>'s C<fetch_options> method.

 <wing-select-new :options="users.field_options" :list="users" property="admin"></wing-select>



=head1 Directives

=head2 v-autosave

Automatically save the value of a form element anytime the model is updated for a C<wing.object>. Saves after 2 seconds, or if the user hits "enter", or if they leave the field. It can automatically grab the property name to save from C<v-model>, like this:

 <input v-autosave="object" v-model="object.properties.property_name">

Or, you can specify the property name with C<v-autosavefield>, like this:

 <input v-autosavefield="'property_name'" v-autosave="object">

C<v-autosavefield> has priority over looking up the property name in the C<v-model> so you can use this to save into individual object properties, like a JSON object stored in MySQL.

Optionally you can specify a delay (in milliseconds), which defaults to 2000, for autosave using:

 <input v-model="object.properties.property_name" v-autosave="object" v-autosavedelay="5000">
 



=head1 Filters

=head2 bytes

Converts a number into a formatted bytes string.

 {{some_object.file_size | bytes}} // 11.3 MB

=head2 capitalize

L<https://github.com/freearhey/vue2-filters>

=head2 currency

L<https://github.com/freearhey/vue2-filters>

=head2 filterBy

L<https://github.com/freearhey/vue2-filters>

=head2 find

L<https://github.com/freearhey/vue2-filters>

=head2 limitBy

L<https://github.com/freearhey/vue2-filters>

=head2 lowercase

L<https://github.com/freearhey/vue2-filters>

=head2 moment

Converts a date into a human readable string that you can format.

You need to load L<https://momentjs.com> to use this filter.

 {{some_object.some_date | moment}} // March 22, 2018
 {{some_object.some_date | moment('YYYY-MM-DD HH:mm:ss')}} // 2018-03-22 12:23:02
 {{some_object.some_date | moment('YYYY-MM-DD','America/Vancouver')}} // 2018-03-22 10:23:02 - formatted to a specific time zone

See more formatting options here: L<https://momentjs.com/docs/#/displaying/format/>

To use the timezome field you must also load L<https://momentjs.com/timezone/>.

=head2 orderBy

L<https://github.com/freearhey/vue2-filters>

=head2 placeholder

L<https://github.com/freearhey/vue2-filters>

=head2 pluralize

L<https://github.com/freearhey/vue2-filters>

=head2 round

Does preceision rounding on a number.

 {{some_number | round(2) }} // 3.14

=head2 timeago

Converts a date into a human readable string like C<3 minutes ago>.

You need to load L<https://momentjs.com> to use this filter.

 {{some_object.some_date | timeago}} // 45 minutes ago

=head2 truncate

L<https://github.com/freearhey/vue2-filters>

=head2 uppercase

L<https://github.com/freearhey/vue2-filters>




=head1 Factories

=head2 wing.base_uri

If set to a domain like C<https://www.thegamecrafter.com> then it will prepend that domain to every request. Do not add a trailing slash. Also, unless the server is configured to handle CORS requests, you will need to set the C<with_credentials> flag on your requests to false.

=head2 wing.confirmations

Enables and disables delete confirmations in the  C<wing.object> factory and C<wing.object_list> factory.

 const c = wing.confirmations;

=head3 enabled()

Returns true if confirmations are enabled.

=head3 disabled()

Returns true if confirmations are disabled.

=head3 toggle()

Sets confirmations equal to true if they are currently false and false if they are currently true. If they are currently true then the user will be asked to confirm whether they want to disable confirmations.

=head2 wing.get_field_options()

Returns an array of objects for a particular field formatted for Bootstrap-Vue select/radio lists. This method also exists on L<wing.object()> and L<wing.object_list()>.

=over

=item field

Required. The name of the field to return the options for.

=item wing_options

Required. An object containing the options returned from wing when you C<_include_options>.

=back

=head2 wing.format_field_label( field_name )

Returns a human readable string from a field name in an automatic way.

=over 

=item field_name

The name of a field.

=back 

=head2 wing.format_field_options()

Returns an object of objects formatted for Bootstrap-Vue select/radio lists. This method also exists on L<wing.object()> and L<wing.object_list()>.

=over

=item wing_options

Required An object containing the options returned from wing when you C<_include_options>.

=back

=head2 wing.object()

Creates an instance of a Wing object, aka a row in the database.

    new Vue({
      el : '#app',
      data: {
          user : wing.object({
              params : {
                  _include_options : 1,
                  _include_related_objects : ['photo'], // assumes you have a related object called photo
              },
              fetch_api : '/api/user',
              on_update : function(properties) {
                  wing.success(properties.username + ' saved.');
              },
              on_delete : function(properties) {
                  wing.success('Deleted' + object.name +'.');
              },
          }),
      },
      mounted() {
          this.user.fetch();
      },
    });

=over

=item options

An object of behavior changing options.

=over

=item properties

Set the object's properties before it is fetched or created.

 {
  "real_name" : "Fred Johnson"
 }

=item fetch_api

The URI used to fetch an object from Wing.

 /api/user/XXX

=item params

A list of behavior changing options for the Wing Rest API.

 {
   "_include_related_objects" : ['photo']
 }

=item on_fetch

A function to call when the object is initially fetched. It is passed the object's properties.

=item on_error

A function to call if anything errors with talking to Wing about the object. It is passed whatever it gets back from Wing.

=item on_create

A function to be called when the object is created.

=item on_update

A function to be called whenever this object is successfully updated.

=item on_delete

A function to be called when this object is deleted.

=item create_api

The URI used to create the object in Wing.

 /api/user

=item with_credentials

Defaults to C<true>. If you don't want to pass your session_id to the server, then set to C<false>.

=back

=back

=head3 properties

An object containing the list of properties retrieved from Wing.

=head3 fetch(options)

Retrieves the data from the Wing Rest API, places it into C<properties> and then returns a promise from the HTTP request.

=over

=item options

An optional object containing a set of behavior modifiying options.

=over

=item on_success

A function to call when the object is initially fetched. It is passed the object's properties.

=item on_error

A function to call if the fetch fails.

=back

=back

=head3 create(properties, options)

Create this object in Wing, inserts the properties into C<properties>, and then returns a promise from the HTTP request.

=over

=item properties

A required object containing the properties to create the object in Wing with.

=item options

An optional object containing behavior changing options.

=over

=item on_success

A function to be called if the creation is successful. It is passed a list of properties, and then a reference to the newly created objectManager.

=item on_error

A function to be called if the creation fails.

=back

=back

=head3 update(options)

Updates the database with the properties in this object, refreshes C<properties>, and then returns a promise from the HTTP request.

=over

=item options

See C<partial_update()> for details.

=back

=head3 save(property, value)

Updates the value of C<property> in the database with the value of C<property> in this object, and then returns a promise from the HTTP request.

=over

=item property

Required. The name of the property to save.

=item value

Optional. The value to save to this property. If not set, then whatever value is already stored in the property client side will be sent to the server.

=back

=head3 partial_update(properties, options)

Updates this object and the database with C<properties>, and then returns a promise from the HTTP request.

=over

=item properties

A required object containing properties for this object.

=item options

An optional object containing behavior changing options.

=over

=item on_success

A function to be called after the update succeeds.

=item on_error

A function to be called if the update fails.

=back

=back

=head3 call(method, uri, properties, options)

Make a call to an arbitrary web service, the result of which is expected to be a property list for this object. This object is then updated with that property list. Returns a promise from the HTTP request.

=over

=item method

C<GET>, C<PUT>, C<DELETE>, or C<POST>.

=item uri

The URI you wish to call.

 /api/user/XXX/check-in

=item properties

An object containing any parameters you wish to pass to the service you're calling.

=item options

An optional object containing behavior changing options.

=over

=item on_success

A function to be called when this call is successful.

=item on_error

A function to be called if this call errors.

=back

=back

=head3 delete(options)

Deletes this object from Wing, and then returns a promise from the HTTP request. Will ask for confirmation before delete. Confirmations can be managed by the confirmations factory.

=over

=item options

An optional object containing behavior changing options.

=over

=item on_success

A function to be called when this delete succeeds.

=item on_error

A function to be called if the delete fails.

=item skip_confirm

If this is C<true> then the user will not be asked to confirm the delete.

=back

=back

=head3 stash(name, [value])

If you need to create some temporary data in an object just for the life of the page, then this is how you can do it. It returns the value stored in C<name>. By default every value will be C<null>.

=over

=item name

Required. The name of the element you wish to retrieve/store.

=item value

Optional. The value you'd like to store.

=back

=head3 get_field_options(field)

Returns an array of objects for a particular field formatted for Bootstrap-Vue select/radio lists. This method also exists as a stand alone method and on L<wing.object_list()>.

=over

=item field

Required. The name of the field to return the options for.

=back

=head3 format_field_options()

Returns an object of objects formatted for Bootstrap-Vue select/radio lists. This method also exists as a stand alone method and on L<wing.object_list()>.

=over

=back


=head2 wing.object_list()

A factory that generates and manages a list of Wing objects, aka a selection of rows in the database. This is a list of C<wing.object>s.

    new Vue({
      el : '#app',
      data: {
          users : wing.object_list({
              params : {
                  _include_options : 1,
                  _include_related_objects : ['photo'], // assumes you have a related object called photo
              },
              list_api : '/api/user',
              new_defaults : { some_id : 'xxx' },
              create_api : '/api/user',
              on_create : function(properties, index) {
                  wing.success(properties.username + ' created.');
              },
              on_update : function(properties, index) {
                  wing.success(properties.username + ' saved.');
              },
              on_delete : function(properties, index) {
                  window.location.href = '/';
              },
          }),
      },
      mounted() {
          this.users.search();
      },
    });

=over

=item list_api

Required if you want to retrieve a list of objects. The URI to fetch a list of objects of this type from Wing.

 /api/user

=item fetch_options

An object containing the parameters used to filter the list of objects retrieved. This all comes from the Wing REST API (L<RestUsage>).

 {
   _sort_by : 'name',
   query : 'blue'
   _include_relationships : 1,
   _include_related_objects : 1
 }

=item create_api

Required if you want to create objects. The URI to post to to create an object of this type.

 /api/user

=item new_defaults

There is an object called C<new> who's entire purpose is to be filled by form element's v-models when you add a new object to this list. This property allows you to set the defaults for that C<new> object.

=item options_api

Normally auto generated from the create_api, but you can override it here. Used with the C<fetch_options()> method.

 /api/user/_options

=item on_create

A function to be executed when a new object is created. It will be passed the properties of the object and an index number.

=item on_update

A function to be executed when an object is updated. It will be passed the properties of the object and an index number.

=item on_delete

A function to be executed when an object is deleted. It will be passed the properties of the object and an index number.

=item on_each

A function to be executed when an object is initially retrieved. It will be passed the C<objectManager> instance of the object.

=item with_credentials

Defaults to C<true>. If you don't want to pass your credentials to the server, then set to C<false>.

=back


=head3 objects

A list of C<wing.object> objects currently managed by the list manager.

=head3 paging

An object containing pagination information about the current list.

 {
  "total_pages" : 1,
  "next_page_number" : 2,
  "total_items" : "3",
  "previous_page_number" : 1,
  "items_per_page" : "10",
  "page_number" : "1"
 }

=head3 new

A javascript object that holds parameters waiting to be used in a new object that will be added to this list. By default it is empty:

 { }

=head3 append(properties, options)

Adds a new object ot the list that you created via some other method.

=over

=item properties

The properties list returned for this object via the REST API.

=item options

An object containing various things that should be done with the data when it is appended.

=over

=item on_each

A function to be executed when an object as it is appended. It will be passed the properties of the object, and the C<objectManager> instance of the object.

=back

=back

However, you can set default values in this object by setting C<new_defaults> when you create the list. C<new> will also be reset to C<new_defaults> whenever C<reset_new()> is called.

=head3 reset_new()

Resets the C<new> to object to C<new_defaults>. This is automatically called when you call C<create()> on the list to reset C<new> after the object has been created and added to the list.

=head3 find_object_id(id)

Return the index number of a specific object in the list based upon C<id>. Returns C<-1> if the object is not found.

=over

=item id

The unique id of the object in the database.

=back

=head3 find_object(id)

Return an object in the list based upon C<id>. Returns C<null> if the object is not found.

=over

=item id

The unique id of the object in the database.

=back

=head3 search(options)

Retrieves a page of data from the Wing Rest API then populates the C<objects> list, and then returns a promise from the HTTP request.

=over

=item options

An object containing various search behavior modifications.

=over

=item params

Put search params here that you don't want to be attached to all subsequent queries via the C<fetch_options>.

=item search_params

Like C<params> but only applies to this call and not any other calls you may make on this object.

=item prepend_item

An object representing an item that you'd like prepended to the search results. This is useful for things like typeahead where you might want to add a "Create New Item" button or something.

=item accumulate

If set to true, the object list will not be reset before adding the newly fetched data.

=item on_create

A function to be executed when a new object is created. It will be passed the properties of the object and an index number.

=item on_update

A function to be executed when an object is updated. It will be passed the properties of the object and an index number.

=item on_delete

A function to be executed when an object is deleted. It will be passed the properties of the object and an index number.

=item on_each

A function to be executed when an object is initially retrieved. It will be passed the properties of the object, and the C<objectManager> instance of the object.

=item on_success

A function to be executed when an a result set comes back on successful search. It will be passed the result set.


=back

=back

=head3 _search(options)

The exact same C<search> method, but without a debounce of 200ms.

=head3 all(options)

Similar to C<search()> except that it fetches the complete list of objects, not just one page of them, and then returns a promise from the HTTP request.

=over

=item options

=over

=item params

Put search params here that you don't want to be attached to all subsequent queries via the C<fetch_options>.

=item search_params

Like C<params> but only applies to this call and not any other calls you may make on this object.

=item on_each

A function to be executed when an object is initially retrieved. It will be passed the properties of the object, and the C<objectManager> instance of the object.

=item on_all_done

A function to be executed once all objects have been fetched.

=item on_success

A function to be executed after each page of objects has been retrieved.

=back

=back

=head3 _all(options)

The exact same method as C<all()> but without a debounce of 200 ms.

=head3 reset()

Sets the object list to empty and then returns a reference to the objectListManager.


=head3 fetch_options(options)

Fetches object creation options. The URI it fetches them from is based upon the C<create_uri> passed into the constructor, unless you specified C<options_api> in the constructor. Stores an object containing information retrieved by C<fetch_options>. The data is placed into the C<object_list>s C<field_options> property. This data provides enumerated lists of data that can be used to create or update an object.

 {
      "registration" : [
         "pending",
         "open",
         "closed"
      ],
      "_registration" : {
         "closed" : "Closed",
         "open" : "Open",
         "pending" : "Pending"
      },
      "private" : [
         0,
         1
      ],
      "_private" : {
         "1" : "Private",
         "0" : "Public"
      }
 }

=over

=item options

An optional object that modifies the behavior of the request.

=over

=item on_success

This method will be executed if the options fetch is successful. Gets passed the result of the request.

=item on_error

This method will be executed if the options fetch is an error. Gets passed the result of the request.

=back

=back

=head3 create(properties, options)

Create a new object in the database and insert it into this list, and then returns a promise from the HTTP request.

=over

=item properties

Optionally set the properties of the new object when you call create(). Normally though, you would be setting the properties directly on the list's C<new> object, or by using C<new_defaults>.

=item options

Optional configurable parameters when create executes.

=over

=item unshift

By default new objects are pushed on to the end of the list. If this property is set to true then the new object will be prepended to the list.

=item on_success

A function to be executed if the object is sucessfully created. It is passed a list of properties.

=back

=back

=head3 update(index, options)

Updates the object's properties in the database with the object's properties in C<wing.object>, and then returns a promise from the HTTP request. See C<update()> in C<objectManager> for details.

=over

=item index

The index number of the object in the C<objects> list.

=item options

See C<update()> in C<objectManager> for details.

=back

=head3 save(index, property)

Updates the value of C<property> in the database with the value of C<property> in objectManager. See C<save()> in C<objectManager> for details.

=over

=item index

The index number of the object in the C<objects> list.

=item options

See C<save()> in C<objectManager> for details.

=back

=head3 partial_update(index, properties, options)

Updates a specific set of properties in the database and objectManager specified by C<properties>. See C<partial_update()> in C<objectManager> for details.

=over

=item index

The index number of the object in the C<objects> list.

=item options

See C<partial_update()> in C<objectManager> for details.

=back

=head3 delete(index, options)

Deletes the object from the database and objectListManager. See C<delete()> in C<objectManager> for details.

=over

=item index

The index number of the object in the C<objects> list.

=item options

See C<delete_update()> in C<objectManager> for details.

=back

=head3 remove(id)

Removes an object from this list without making a call to the server. See C<delete()> if you wish to remove it from the server too.

=over

=item id

The unique id of the object you wish to delete.

=back

=head3 get_field_options(field)

Returns an array of objects for a particular field formatted for Bootstrap-Vue select/radio lists. This method also exists on L<wing.object()> and as a stand alone method.

=over

=item field

Required. The name of the field to return the options for.

=back

=head3 format_field_options()

Returns an object of objects formatted for Bootstrap-Vue select/radio lists. This method also exists on L<wing.object()> and as a stand alone method.

=over

=back

=head3 format_objects_as_field_options(text_field)

Formats the entire list as a Bootstrap-Vue select/radio option list.

=over

=item text_field

The name of the field you want to use as the text label for the option. Often this will be C<name>.

=back

=head1 Notifications

Wing gives you an easy way to notify users. The message can take one of the following formats:

=over

=item String

 wing.success('Item added to cart.');

=item Vue Virtual DOM

L<https://vuejs.org/v2/guide/render-function.html#The-Virtual-DOM>

 const h = this.$createElement;
 wing.success(
    h('div', {}, [
        'Item added to cart.',
        h('a', { attrs : {href : '/cart'}, class : 'btn btn-primary'}, 'View Cart')
    ])
 );

=back

=item Array of objects

Just a straight Javascript data structure that will be turned into a Vue Virtual DOM.

 wing.success([
    'div', {}, [
        'Item added to cart. ',
        ['a', {attrs : {href : '/cart'}, class : 'btn btn-primary'}, 'View Cart']
    ]
 ]);

=item JSON string

A JSON string that will be turned into a Vue Virtual DOM. Use this when you want to do some fancy formatting, but need to pass a string message around, like through Firebase notifications.

 wing.success(`[
    "div", {}, [
        "Item added to cart. ",
        ["a", {"attrs" : {"href" : "/cart"}, "class" : "btn btn-primary"}, "View Cart"]
    ]
 ]`);
 

=head2 wing.error(message, options)

A red box in the center of the screen to let the user know something bad has happened.

=over

=item message

The message you want to be diplayed.

=item options

An optional object with the following optional parameters:

=over

=item ttl

In milliseconds, how long should the message remain on screen. Default 15000.

=item href

If specified, the message will be linked to this URL.

=item title

Optionally override the title of the message. Defaults to C<Error>.

=back

=back

=head2 wing.info(message, options)

A blue box in the lower left corner of the screen to let the user know something they should be aware of, like an ongoing process.

=over

=item message

The message you want to be diplayed.

=item options

An optional object with the following optional parameters:

=over

=item ttl

In milliseconds, how long should the message remain on screen. Default 8000.

=item href

If specified, the message will be linked to this URL.

=item title

Optionally override the title of the message. Defaults to C<Info>.

=back

=back

=head2 wing.success(message, options)

A green box in the lower left corner of the screen to let the user know something they did worked.

=over

=item message

The message you want to be diplayed.

=item options

An optional object with the following optional parameters:

=over

=item ttl

In milliseconds, how long should the message remain on screen. Default 8000.

=item href

If specified, the message will be linked to this URL.

=item title

Optionally override the title of the message. Defaults to C<Success>.

=back

=back

=head2 wing.warn(message, options)

A blue box in the lower left corner of the screen to let the user know something that may be of concern, but isn't an error.

=over

=item message

The message you want to be diplayed.

=item options

An optional object with the following optional parameters:

=over

=item ttl

In milliseconds, how long should the message remain on screen. Default 8000.

=item href

If specified, the message will be linked to this URL.

=item title

Optionally override the title of the message. Defaults to C<Warning>.

=back

=back

=head1 Utilities

=head2 wing.copy_to_clipboard(value)

Adds some text to the user's clipboard.

=over

=item value

A string.

=back

=head2 wing.get_cookie(name)

Fetches the value of a cookie.

=over

=item name

The name of the cookie to retrieve.

=head2 wing.natural_sort(a,b)

Sort the values of a list so that numeric values show up in the order you would expect in an alpha-numeric list.

=over

=item a

The first sort value, compatible with Javascript's C<sort()> function. L<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort>

=item b

The second sort value, compatible with Javascript's C<sort()> function. L<https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/sort>

=back

=head2 wing.scroll_to(element)

Scroll the window to a particular element.

=over

=item element

The DOM element to scroll to. Use C<document.getElementById()> or some such.

=back

=head2 wing.get_query_param(name, [url])

Returns the value of a query param.

=over

=item name

The name of the parameter you wish to fetch.

=item url

Optional. Defaults to C<window.location.href>.

=back

=head2 wing.parse_date(input, timezone)

Takes any number of date-looking inputs, and converts them into a Moment.js object.

Requires L<https://momentjs.com/> to work.


=over

=item input

Something that looks like a date. It can take many different forms:

=over

=item parsable array

The first element of the array is string representing a date, and the second element is a pattern for parsing that string.

 ['2001/15/05','YYYY/DD/MM']

=item epoch

A number of seconds since the January 1, 1970. Aka the unix epoch.

=item wing datetime string

The natural output of a datetime field from Wing's Rest API.

 2017-01-03 13:03:17

=item wing date string

The natural output of a date field from Wing's Rest API. Rarely used.

 2017-01-03

=item Moment.js Object

A Momemnt.js object.

 moment()

=item Javascript Date Object

A javascript Date object.

 new Date()

=back

=item timezone

A timezone string like C<America/Chicago> to convert the date to. Wing datetime fields are stored in C<UTC>. Dates will by default be rendered in browser localtime.

To use the timezome field you must also load L<https://momentjs.com/timezone/>.

=back

=head2 wing.string_random(length)

Generates and returns a random string of characters.

=over

=item length

An integer representing how many characters should be included. Defaults to 6.

=back

=cut
