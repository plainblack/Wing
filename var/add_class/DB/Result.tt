package [% project %]::DB::Result::[% class_name %];

use Moose;
use Wing::Perl;
use Ouch;
extends 'Wing::DB::Result';[% USE String %][% lower_class = String.new(class_name).lower %]

with 'Wing::Role::Result::Field';
with 'Wing::Role::Result::UriPart';
with 'Wing::Role::Result::UserControlled';


#with 'Wing::Role::Result::PrivilegeControlled';
#__PACKAGE__->wing_controlled_by_privilege('supervisor');
#__PACKAGE__->wing_viewed_by_privilege('employee');

#with 'Wing::Role::Result::Child';
#__PACKAGE__->wing_children(
#    votes => {
#        view           => 'public',
#        related_class  => '[% project %]::DB::Result::[% class_name %]Vote',
#        related_id     => '[% lower_class %]_id',
#    },
#
#    #Add children here
#
#);

#with 'Wing::Role::Result::Parent';
#__PACKAGE__->wing_parents(
#    [% lower_class %]_container => {
#        view           => 'public',
#        edit           => 'required',
#        related_class  => '[% project %]::DB::Result::[% class_name %]Container',
#    },
#
#    #Add parents here
#
#);

__PACKAGE__->wing_fields(
    name => {
        dbic 		    => { data_type => 'varchar', size => 60, is_nullable => 0 },
        view		    => 'public',
        edit		    => 'required',
    },
    description => {
        dbic 		    => { data_type => 'mediumtext', is_nullable => 0 },
        view		    => 'public',
        edit		    => 'postable',
    },
    status => {
        dbic 		    => { data_type => 'varchar', size => 60, is_nullable => 0, default_value => 'pending' },
        view		    => 'admin',
        edit		    => 'admin',
        options         => [qw(pending open closed)],
        _options        => {
            pending         => 'Pending',
            open            => 'Open',
            closed          => 'Closed',
        },
    },
    is_cool => {
        dbic            => { data_type => 'tinyint', is_nullable => 0, default_value => 0 },
        view            => 'private',
        edit            => 'required',
        options         => [0,1],
        _options        => { 0 => 'No', 1 => 'Yes' },
        skip_duplicate  => 1,
    },

    #Add more fields here
    
);

with 'Wing::Role::Result::DateTimeField';
__PACKAGE__->wing_datetime_fields(
    start_date => {
        set_on_create   => 1,
        view            => 'public',
        edit            => 'postable',
        skip_duplicate  => 1,
    },
    end_date => {
        set_on_create   => 1,
        view            => 'public',
        edit            => 'postable',
        skip_duplicate  => 1,
    },
);

## This is a custom index called a trigram which allows for fast substring searching of large tables.
use constant trigram_index_fields => ['name'];
with 'Wing::Role::Result::Trigram';

__PACKAGE__->wing_finalize_class( table_name => '[% String.new(class_name).lower.append('s') %]');

## You will either want to delete all of these or some of it. 
around sqlt_deploy_hook  => sub {
    my ($orig, $self, $sqlt_table) = @_;
    $orig->($self, $sqlt_table);

    # creating a regular index, which could be useful for sorting by name or "name like 'Dav%'" type searches. Won't be useful for searching if you want to do "name like '%Dav%'" with a wildcard at the front. Also you can create this by just doing "indexed => 1" on the name definition.
    $sqlt_table->add_index(name => 'idx_name', fields => ['name']);

    # creating a MySQL full text search, which is great for fast searching words or phrases
    $sqlt_table->add_index(name => 'idxft_name', fields => ['name'], type => 'FULLTEXT');

    # if you want to create a special DB index
    $sqlt_table->add_index(name => 'idx_ending_soon', fields => ['status','end_date']);
    
};

around describe => sub {
    my ($orig, $self, %options) = @_;
    my $out = $orig->($self, %options);
    $out->{view_uri} = $self->view_uri;
    if ($options{include_private}) {
        $out->{edit_uri} = $self->edit_uri;
    }
    return $out;
};

sub view_uri {
    my $self = shift;
    return '/[% String.new(class_name).lower.append('s') %]/'.$self->uri_part;
}

sub edit_uri {
    my $self = shift;
    return '/[% String.new(class_name).lower.append('s') %]/'.$self->id.'/edit';
}

no Moose;
__PACKAGE__->meta->make_immutable(inline_constructor => 0);

